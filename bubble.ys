# Execution begins at address 0, written by Sizhe Li, 1900013061
	.pos 0
	irmovq stack, %rsp
	call main
	halt

# Sample linked list
.align 8
Array:
	.quad 0xbca
	.quad 0xcba
	.quad 0xacb
	.quad 0xcab
	.quad 0xabc
	.quad 0xbac

# Main function
main:
	irmovq Array, %rdi
	irmovq $6, %rsi
#	call bubble_sort
	call bubble_sort
	ret

# bubble_sort(long *data, long count)
# data in %rdi, count in %rsi
bubble_sort:
	irmovq $8, %r14		# move 8 to %r14
	irmovq $1, %r13		# move 1 to %r13
	subq %r13, %rsi		# count - 1 in %rsi
	addq %rsi, %rsi
	addq %rsi, %rsi
	addq %rsi, %rsi 	# 8*(count-1) in % rsi
	rrmovq %rdi, %rbx 	# *data in %rbx
	addq %rsi, %rbx		# init last in %rbx

loop:
	rrmovq %rbx, %rcx	# last in %rcx
	subq %rdi, %rcx		# last - data in %rcx
	je L1
	
# the 2nd cycle
	rrmovq %rdi, %rdx	# init i in %rdx
loop2:
	rrmovq %rbx, %rcx	# last in %rcx
	subq %rdx, %rcx		# last - i
	
	je L2
	mrmovq 0x8(%rdx), %r8	# *(i + 1) in %r8
	mrmovq (%rdx), %r9	# *i in %r9
	rrmovq %r9, %r10	# *i in %r10
	subq %r8, %r10		# *i - *(i + 1)

	jle L3			# if (*i <= *(i + 1))
	rmmovq %r8, (%rdx)
	rmmovq %r9, 0x8(%rdx)
	
L3:	
	addq %r14, %rdx
	jmp loop2
	
L2:	
	subq %r14, %rbx
	jmp loop

L1:
	ret	

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
