#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Sizhe Li 1900013061
#
# Describe how and why you modified the baseline code.
# Firstly, make a 7*7 loop unrolling.
# Then, deal with the left no more than 6 numbers.
# Move them one by one and check if they are positive.
# During this procedure, I have tried my best to avoid load & use hazard, and I think there is no load & use hazard.
# In order to do that, I read one number from the memory
# and then calculate the number of left numbers.
# After checking this, I save the number to the memory.
# In addition, when dealing with the fifth number,
# there do not need any calculation of the left length.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-7, %rdx
	jge Loop			# if(len >= 6) continue;
	iaddq $7, %rdx
	jne left
	ret
Loop:	
	mrmovq (%rdi), %r8
	mrmovq 0x8(%rdi), %r9
	mrmovq 0x10(%rdi), %r10
	mrmovq 0x18(%rdi), %r11
	mrmovq 0x20(%rdi), %r12
	mrmovq 0x28(%rdi), %r13
	mrmovq 0x30(%rdi), %r14
	
	rmmovq %r8, (%rsi)
	rmmovq %r9, 0x8(%rsi)
	rmmovq %r10, 0x10(%rsi)
	rmmovq %r11, 0x18(%rsi)
	rmmovq %r12, 0x20(%rsi)
	rmmovq %r13, 0x28(%rsi)
	rmmovq %r14, 0x30(%rsi)

judge0:
	andq %r8, %r8
	jle judge1
	iaddq $1, %rax
judge1:
	andq %r9, %r9
	jle judge2
	iaddq $1, %rax
judge2:
	andq %r10, %r10
	jle judge3
	iaddq $1, %rax
judge3:
	andq %r11, %r11
	jle judge4
	iaddq $1, %rax
judge4:
	andq %r12, %r12
	jle judge5
	iaddq $1, %rax
judge5:
	andq %r13, %r13
	jle judge6
	iaddq $1, %rax
judge6:
	andq %r14, %r14
	jle step
	iaddq $1, %rax

step:
	iaddq $0x38, %rdi
	iaddq $0x38, %rsi

test:
	iaddq $-7, %rdx
	jge Loop			# if(len >= 6) continue;
	iaddq $7, %rdx
	jne left
	ret

left:
	mrmovq (%rdi), %rbx
	iaddq $-1, %rdx
	jne left2

	rmmovq %rbx, (%rsi)
	andq %rbx, %rbx
	jle Done
	iaddq $1, %rax
	ret


left2:
	rmmovq %rbx, (%rsi)
	andq %rbx, %rbx
	jle next1
	iaddq $1, %rax
next1:
	mrmovq 0x8(%rdi), %rbx
	iaddq $-1, %rdx
	jne left3

	rmmovq %rbx, 0x8(%rsi)
	andq %rbx, %rbx
	jle Done
	iaddq $1, %rax
	ret

left3:
	rmmovq %rbx, 0x8(%rsi)
	andq %rbx, %rbx
	jle next2
	iaddq $1, %rax

next2:
	mrmovq 0x10(%rdi), %rbx
	iaddq $-1, %rdx
	jne left4

	rmmovq %rbx, 0x10(%rsi)
	andq %rbx, %rbx
	jle Done
	iaddq $1, %rax
	ret
	
left4:
	rmmovq %rbx, 0x10(%rsi)
	andq %rbx, %rbx
	jle next3
	iaddq $1, %rax
next3:
	mrmovq 0x18(%rdi), %rbx
	iaddq $-1, %rdx
	jne left5
	
	rmmovq %rbx, 0x18(%rsi)
	andq %rbx, %rbx
	jle Done
	iaddq $1, %rax
	ret

left5:
	rmmovq %rbx, 0x18(%rsi)
	andq %rbx, %rbx
	jle next4
	iaddq $1, %rax
next4:
	mrmovq 0x20(%rdi), %rbx
	iaddq $-1, %rdx
	je last
	
left6:
	mrmovq 0x28(%rdi), %rcx
	rmmovq %rbx, 0x20(%rsi)
	andq %rbx, %rbx
	jle next5
	iaddq $1, %rax
next5:	
	rmmovq %rcx, 0x28(%rsi)
	andq %rcx, %rcx
	jle Done
	iaddq $1, %rax
	ret

last:
	rmmovq %rbx, 0x20(%rsi)
	andq %rbx, %rbx
	jle Done
	iaddq $1, %rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

